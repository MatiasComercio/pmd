<project name="pmd" default="alljavacc" basedir="../../">

    <property name="javacc-home.path" value="target/lib" />

    <target name="alljavacc"
            description="Generates all JavaCC aspects within PMD"
            depends="checkUpToDate,init,objectivecjavacc,cleanup" />

    <target name="checkUpToDate">
        <uptodate property="javaccBuildNotRequired" targetfile="${target}/last-generated-timestamp">
            <srcfiles dir="etc/grammar" includes="*.jj*"/>
        </uptodate>
        <echo message="up to date check: javaccBuildNotRequired=${javaccBuildNotRequired}"/>
    </target>

    <target name="init" unless="javaccBuildNotRequired">
        <mkdir dir="${javacc-home.path}" />
        <copy file="${javacc.jar}" tofile="${javacc-home.path}/javacc.jar" />

        <mkdir dir="${target}"/>
        <touch file="${target}/last-generated-timestamp"/>
    </target>

    <target name="cleanup">
        <delete dir="${javacc-home.path}" />
    </target>

    <target name="objectivecjavacc" description="Generates the Objective-C grammar" unless="javaccBuildNotRequired">
        <delete dir="${target}/net/sourceforge/pmd/lang/objectivec/ast" />
        <mkdir dir="${target}/net/sourceforge/pmd/lang/objectivec/ast" />
        <!-- Ensure generated using CharStream interface -->
        <javacc static="false"
                usercharstream="true"
                target="etc/grammar/ObjC2.0.jj"
                outputdirectory="${target}/net/sourceforge/pmd/lang/objectivec/ast"
                javacchome="${javacc-home.path}" />
        <replace file="${target}/net/sourceforge/pmd/lang/objectivec/ast/ObjectiveCParserTokenManager.java"
                 token="class ObjectiveCParserTokenManager"
                 value="class ObjectiveCParserTokenManager extends net.sourceforge.pmd.lang.ast.AbstractTokenManager" />
        <delete file="${target}/net/sourceforge/pmd/lang/objectivec/ast/CharStream.java" />
        <delete file="${target}/net/sourceforge/pmd/lang/objectivec/ast/ParseException.java" />
        <delete file="${target}/net/sourceforge/pmd/lang/objectivec/ast/TokenMgrError.java" />

        <replace file="${target}/net/sourceforge/pmd/lang/objectivec/ast/Token.java">
            <replacetoken>public class Token implements java.io.Serializable</replacetoken>
            <replacevalue><![CDATA[import net.sourceforge.pmd.lang.ast.GenericToken;
import net.sourceforge.pmd.util.GenericTokens;

public class Token implements GenericToken, java.io.Serializable]]></replacevalue>
        </replace>

        <!--Add implementation methods of GenericToken-->
        <replace file="${target}/net/sourceforge/pmd/lang/objectivec/ast/Token.java">
            <replacetoken>public Token specialToken;</replacetoken>
            <replacevalue><![CDATA[public Token specialToken;

  private GenericToken emptyToken;

  @Override
  public GenericToken getNext() {
    return next == null ? emptyToken : next;
  }

  @Override
  public void setNext(final GenericToken token) {
    if (GenericTokens.isEmptyToken(token)) {
        this.emptyToken = token;
        this.next = null;
    } else {
        this.emptyToken = null;
        this.next = Token.class.cast(token);
    }
  }

  @Override
  public GenericToken getPreviousComment() {
    return specialToken;
  }

  @Override
  public GenericToken getSpecialToken() {
    return specialToken;
  }

  @Override
  public void setSpecialToken(final GenericToken token) {
    this.specialToken = Token.class.cast(token);
  }

  @Override
  public String getImage() {
    return image;
  }

  @Override
  public int getBeginLine() {
    return beginLine;
  }

  @Override
  public int getEndLine() {
    return endLine;
  }

  @Override
  public int getBeginColumn() {
    return beginColumn;
  }

  @Override
  public int getEndColumn() {
    return endColumn;
  }

  @Override
  public boolean is(final int kind) {
    return this.kind == kind;
  }

]]></replacevalue>
        </replace>
    </target>

</project>
